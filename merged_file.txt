# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.pytest_cache/
.coverage
htmlcov/

# Virtual Environment
venv/
ENV/
.env

# IDE
.idea/
.vscode/
*.swp
*.swo
*~

# Project specific
error.log
merged_result*.md
*.spec

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.lnk
import os
import shutil
import subprocess
import sys
import glob

def find_tkdnd_path():
    """tkdndライブラリのパスを探す"""
    # venvのsite-packagesディレクトリを取得
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        # venv環境の場合
        site_packages = os.path.join(sys.prefix, 'Lib', 'site-packages')
    else:
        # グローバル環境の場合
        site_packages = os.path.join(sys.prefix, 'Lib', 'site-packages')

    # tkinterdnd2のパスを構築
    tkdnd_path = os.path.join(site_packages, 'tkinterdnd2')
    if not os.path.exists(tkdnd_path):
        raise FileNotFoundError(f"tkinterdnd2 directory not found at {tkdnd_path}")
    
    # tkdndディレクトリを探す
    tkdnd_dll_dir = os.path.join(tkdnd_path, 'tkdnd')
    if not os.path.exists(tkdnd_dll_dir):
        raise FileNotFoundError(f"tkdnd directory not found at {tkdnd_dll_dir}")
    
    return tkdnd_path, tkdnd_dll_dir

def clean_build():
    """ビルド関連の一時ファイルやディレクトリを削除"""
    dirs_to_remove = ['build', 'dist', '__pycache__']
    files_to_remove = ['*.spec', '*.pyc']
    
    # ディレクトリの削除
    for d in dirs_to_remove:
        if os.path.exists(d):
            shutil.rmtree(d)
    
    # ファイルの削除
    for pattern in files_to_remove:
        for f in os.listdir('.'):
            if f.endswith(pattern[1:]):  # パターンから'*.'を除いて比較
                os.remove(f)

def build_exe():
    """実行可能ファイルのビルド"""
    # tkdndのパスを取得
    tkdnd_path, tkdnd_dll_dir = find_tkdnd_path()
    print(f"Found tkinterdnd2 at: {tkdnd_path}")
    print(f"Found tkdnd DLLs at: {tkdnd_dll_dir}")

    # データファイルの設定
    datas = [
        (tkdnd_dll_dir, 'tkinterdnd2/tkdnd'),  # tkdndライブラリ
        ('config.ini', '.'),  # 設定ファイル
    ]

    # PyInstallerのコマンドを構築
    cmd = [
        'pyinstaller',
        '--name=DebugFileMerger',
        '--onefile',  # 単一の実行可能ファイルを生成
        '--noconsole',  # コンソールウィンドウを表示しない
        '--clean',  # ビルド前にキャッシュをクリア
        '--hidden-import=tkinterdnd2',  # tkinterdnd2を明示的にインポート
        '--collect-all=tkinterdnd2',  # tkinterdnd2の全ファイルを収集
    ]

    # データファイルの追加
    for src, dst in datas:
        cmd.append(f'--add-data={src};{dst}')

    # メインスクリプトの追加
    cmd.append('main.py')
    
    # コマンドを実行
    print("Running PyInstaller with command:", ' '.join(cmd))
    subprocess.run(cmd, check=True)

    # 生成されたexeファイルの確認
    exe_path = os.path.join('dist', 'DebugFileMerger.exe')
    if os.path.exists(exe_path):
        print(f"\nExecutable successfully created at: {exe_path}")
        print(f"Size: {os.path.getsize(exe_path) / (1024*1024):.1f} MB")
    else:
        raise FileNotFoundError("Executable file was not created")

def main():
    try:
        # ビルド前のクリーンアップ
        print("Cleaning up previous builds...")
        clean_build()
        
        # 実行可能ファイルのビルド
        print("Building executable...")
        build_exe()
        
        print("\nBuild completed successfully!")
        print("You can now distribute the executable from the 'dist' directory.")
    except Exception as e:
        print(f"\nError during build: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
# このファイルはFlaskDebugFileMergerの設定ファイルです
# 各設定項目の説明：

[DEFAULT]
# マージ結果を保存するファイル名
# 例: merged_result.md → プロジェクトディレクトリ直下に「merged_result.md」という名前でファイルが作成されます
output_filename = merged_result.md

# ディレクトリ構造を表示する深さの設定
# max_depth = 3 の場合：
#   project/          # 1階層目
#   ├─ src/          # 2階層目
#   │  ├─ main.py    # 3階層目
#   │  └─ utils.py   # 3階層目
#   └─ docs/         # 2階層目
# 
# max_depth = 2 の場合：
#   project/          # 1階層目
#   ├─ src/          # 2階層目
#   └─ docs/         # 2階層目
#
# 大きな値にすると深い階層まで表示されますが、
# プロジェクトが大きい場合は表示が長くなりすぎる可能性があります
max_depth = 3
# -*- mode: python ; coding: utf-8 -*-
from PyInstaller.utils.hooks import collect_all

datas = [('C:\\work2\\DebugFileMerger\\venv\\Lib\\site-packages\\tkinterdnd2\\tkdnd', 'tkinterdnd2/tkdnd'), ('config.ini', '.')]
binaries = []
hiddenimports = ['tkinterdnd2']
tmp_ret = collect_all('tkinterdnd2')
datas += tmp_ret[0]; binaries += tmp_ret[1]; hiddenimports += tmp_ret[2]


a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=binaries,
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    noarchive=False,
)
pyz = PYZ(a.pure)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.datas,
    [],
    name='DebugFileMerger',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
import os
import sys
import logging  # ログ記録用のモジュール
import configparser  # 設定ファイル読み込み用のモジュール
import tkinter as tk  # GUIを作成するための標準ライブラリ
from tkinter import filedialog, messagebox  # ファイル選択ダイアログとメッセージボックス用
from tkinter import ttk  # モダンなGUIウィジェット用
import traceback

def setup_tkdnd():
    """tkdndライブラリのセットアップ"""
    # 実行ファイルのディレクトリを取得
    if getattr(sys, 'frozen', False):
        # PyInstallerで作成された実行ファイルの場合
        base_path = sys._MEIPASS
    else:
        # 通常のPython実行の場合
        base_path = os.path.dirname(os.path.abspath(__file__))

    # tkdndのパスを環境変数に追加
    tkdnd_path = os.path.join(base_path, 'tkinterdnd2', 'tkdnd')
    if os.path.exists(tkdnd_path):
        os.environ['TKDND_LIBRARY'] = tkdnd_path

    # tkinterdnd2をインポート
    from tkinterdnd2 import DND_FILES, TkinterDnD
    return DND_FILES, TkinterDnD

# tkdndのセットアップ
DND_FILES, TkinterDnD = setup_tkdnd()

from merger import merge_files, setup_logging  # 自作のマージ機能モジュール

class FileListItem(ttk.Frame):
    """ファイルリストの各項目を表すクラス"""
    def __init__(self, parent, filepath, on_delete, is_odd=False):
        super().__init__(parent)
        self.filepath = filepath
        
        # 背景色を交互に変更
        if is_odd:
            self.configure(style='Odd.TFrame')
        else:
            self.configure(style='Even.TFrame')
        
        # ファイルパスを表示するラベル
        self.label = ttk.Label(self, text=filepath)
        self.label.pack(side='left', padx=(0, 5), fill='x', expand=True)
        # 削除ボタン
        self.delete_btn = ttk.Button(self, text="×", width=3, command=lambda: on_delete(self))
        self.delete_btn.pack(side='right')

class ScrollableFileList(ttk.Frame):
    """スクロール可能なファイルリストを表すクラス"""
    def __init__(self, parent, on_double_click):
        super().__init__(parent)
        # スクロールバーの作成
        self.scrollbar = ttk.Scrollbar(self)
        self.scrollbar.pack(side='right', fill='y')
        
        # キャンバスの作成
        self.canvas = tk.Canvas(self, yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side='left', fill='both', expand=True)
        
        # スクロールバーとキャンバスの連動
        self.scrollbar.config(command=self.canvas.yview)
        
        # ファイルリストを配置するフレーム
        self.file_frame = ttk.Frame(self.canvas)
        self.canvas_frame = self.canvas.create_window((0, 0), window=self.file_frame, anchor='nw')
        
        # ファイルパスのリスト
        self.file_items = []
        
        # キャンバスのサイズ調整
        self.file_frame.bind('<Configure>', self._on_frame_configure)
        self.canvas.bind('<Configure>', self._on_canvas_configure)
        
        # マウスホイールでのスクロール
        self.canvas.bind_all('<MouseWheel>', self._on_mousewheel)
        
        # ダブルクリックイベント
        self.canvas.bind('<Double-Button-1>', lambda e: on_double_click())
        self.file_frame.bind('<Double-Button-1>', lambda e: on_double_click())

    def _on_frame_configure(self, event=None):
        """内部フレームのサイズが変更されたときにスクロール範囲を更新"""
        self.canvas.configure(scrollregion=self.canvas.bbox('all'))

    def _on_canvas_configure(self, event):
        """キャンバスのサイズが変更されたときに内部フレームの幅を調整"""
        self.canvas.itemconfig(self.canvas_frame, width=event.width)

    def _on_mousewheel(self, event):
        """マウスホイールでスクロール"""
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), 'units')

    def add_file(self, filepath):
        """ファイルをリストに追加"""
        is_odd = len(self.file_items) % 2 == 1
        item = FileListItem(self.file_frame, filepath, self.remove_file, is_odd)
        item.pack(fill='x', padx=5, pady=2)
        self.file_items.append(item)

    def remove_file(self, item):
        """ファイルをリストから削除"""
        item.pack_forget()
        item.destroy()
        self.file_items.remove(item)
        # 背景色を再設定
        for i, item in enumerate(self.file_items):
            if i % 2 == 1:
                item.configure(style='Odd.TFrame')
            else:
                item.configure(style='Even.TFrame')

    def get_files(self):
        """現在のファイルパスのリストを取得"""
        return [item.filepath for item in self.file_items]

    def clear(self):
        """リストをクリア"""
        for item in self.file_items[:]:
            self.remove_file(item)

def main():
    # ロギングの設定（エラーや重要な情報を記録するため）
    setup_logging()

    # ==========================================================
    # 設定ファイル（config.ini）の読み込み
    # ==========================================================
    config = configparser.ConfigParser()
    if os.path.isfile('config.ini'):
        # UTF-8エンコーディングを指定して設定ファイルを読み込み
        config.read('config.ini', encoding='utf-8')
    # デフォルト値の設定（設定ファイルが無い場合や設定が見つからない場合に使用）
    default_output = config['DEFAULT'].get('output_filename', 'merged_result.md')
    max_depth = config['DEFAULT'].getint('max_depth', 3)

    # ==========================================================
    # メインウィンドウの設定
    # ==========================================================
    root = TkinterDnD.Tk()  # ドラッグ＆ドロップ対応のTkインターフェース
    root.title("Flask Debug File Merger")  # ウィンドウのタイトル
    root.geometry("800x600")  # ウィンドウサイズ（幅x高さ）

    # スタイルの設定
    style = ttk.Style()
    style.configure('Odd.TFrame', background='#f0f0f0')
    style.configure('Even.TFrame', background='white')

    # ==========================================================
    # プロジェクトディレクトリ選択部分の作成
    # ==========================================================
    frame_dir = ttk.Frame(root)  # フレーム（コンテナ）の作成
    frame_dir.pack(fill='x', pady=5, padx=5)  # フレームの配置（x方向に伸縮可能）
    
    # ラベルとテキスト入力欄の配置
    ttk.Label(frame_dir, text="Project Directory:").pack(side='left')
    project_dir_var = tk.StringVar()  # ディレクトリパスを保持する変数
    entry_dir = ttk.Entry(frame_dir, textvariable=project_dir_var, width=50)
    entry_dir.pack(side='left', padx=5)

    # ディレクトリ選択ダイアログを開く関数
    def browse_dir():
        d = filedialog.askdirectory()  # ディレクトリ選択ダイアログを表示
        if d:  # ディレクトリが選択された場合
            project_dir_var.set(d)  # 選択されたパスを入力欄にセット
    
    # 「Browse...」ボタンの配置
    ttk.Button(frame_dir, text="Browse...", command=browse_dir).pack(side='left')

    # ==========================================================
    # タブインターフェースの作成
    # ==========================================================
    notebook = ttk.Notebook(root)  # タブコンテナの作成
    notebook.pack(fill='both', expand=True, pady=5, padx=5)

    # ファイルリスト用タブの作成
    frame_files = ttk.Frame(notebook)
    notebook.add(frame_files, text='Files')  # タブに「Files」ページを追加

    # ファイル追加ボタンの作成
    def add_files():
        """ファイル選択ダイアログを表示してファイルを追加"""
        project_dir = project_dir_var.get()
        if not project_dir:
            messagebox.showerror("Error", "Please set the Project Directory first.")
            return
        
        files = filedialog.askopenfilenames()
        if files:
            for f in files:
                try:
                    relpath = os.path.relpath(f, project_dir)
                    file_list.add_file(relpath)
                except ValueError:
                    file_list.add_file(f)

    add_button = ttk.Button(frame_files, text="Add Files...", command=add_files)
    add_button.pack(anchor='w', padx=5, pady=5)

    # ドラッグ＆ドロップ領域の作成
    ttk.Label(frame_files, text="Drop files here or double-click to add:").pack(anchor='w', padx=5)
    file_list = ScrollableFileList(frame_files, add_files)  # ダブルクリックでadd_files関数を呼び出す
    file_list.pack(fill='both', expand=True, padx=5)

    # エラーメッセージ用タブの作成
    frame_error = ttk.Frame(notebook)
    notebook.add(frame_error, text='Error Message')  # タブに「Error Message」ページを追加

    # エラーメッセージ入力領域の作成
    ttk.Label(frame_error, text="Paste error message here:").pack(anchor='w', padx=5)
    error_text = tk.Text(frame_error, wrap=tk.WORD, height=20)  # テキスト入力欄
    error_text.pack(fill='both', expand=True, padx=5)

    # エラーログ1用タブの作成
    frame_error_log1 = ttk.Frame(notebook)
    notebook.add(frame_error_log1, text='Error Log 1')

    # エラーログ1入力領域の作成
    ttk.Label(frame_error_log1, text="Paste error log 1 here:").pack(anchor='w', padx=5)
    error_log1_text = tk.Text(frame_error_log1, wrap=tk.WORD, height=20)
    error_log1_text.pack(fill='both', expand=True, padx=5)

    # エラーログ2用タブの作成
    frame_error_log2 = ttk.Frame(notebook)
    notebook.add(frame_error_log2, text='Error Log 2')

    # エラーログ2入力領域の作成
    ttk.Label(frame_error_log2, text="Paste error log 2 here:").pack(anchor='w', padx=5)
    error_log2_text = tk.Text(frame_error_log2, wrap=tk.WORD, height=20)
    error_log2_text.pack(fill='both', expand=True, padx=5)

    # ==========================================================
    # ドラッグ＆ドロップの処理関数
    # ==========================================================
    def drop_enter(event):
        """ドラッグしたアイテムがウィンドウに入ってきた時の処理"""
        event.widget.focus_force()
        return event.action

    def drop(event):
        """アイテムがドロップされた時の処理"""
        # ドロップされたファイルのパスを取得（複数ファイルの場合は空白区切り）
        paths = root.splitlist(event.data)
        project_dir = project_dir_var.get()
        
        # プロジェクトディレクトリが設定されているか確認
        if not project_dir:
            messagebox.showerror("Error", "Please set the Project Directory first.")
            return
        
        # 各ファイルをリストに追加
        for p in paths:
            try:
                # プロジェクトディレクトリからの相対パスを計算
                relp = os.path.relpath(p, project_dir)
                file_list.add_file(relp)
            except ValueError:
                # 相対パス計算に失敗した場合（異なるドライブなど）は絶対パスを使用
                file_list.add_file(p)

    # ドラッグ＆ドロップのイベントをバインド
    file_list.canvas.drop_target_register(DND_FILES)
    file_list.canvas.dnd_bind('<<DropEnter>>', drop_enter)
    file_list.canvas.dnd_bind('<<Drop>>', drop)

    # ==========================================================
    # ボタン類の作成と処理関数の定義
    # ==========================================================
    frame_buttons = ttk.Frame(root)
    frame_buttons.pack(fill='x', pady=5, padx=5)

    def do_merge():
        """マージボタンが押された時の処理"""
        try:
            # プロジェクトディレクトリの確認
            project_dir = project_dir_var.get().strip()
            if not project_dir:
                messagebox.showerror("Error", "Project directory is not set.")
                return

            # ファイルリストとエラーテキストの取得
            relative_paths = file_list.get_files()
            error_message = error_text.get('1.0', tk.END).strip()
            error_log1 = error_log1_text.get('1.0', tk.END).strip()
            error_log2 = error_log2_text.get('1.0', tk.END).strip()

            # マージ対象が存在するか確認
            if not relative_paths and not error_message and not error_log1 and not error_log2:
                messagebox.showerror("Error", "No files or error messages to merge.")
                return

            # マージ処理の実行
            output_md = default_output
            merge_files(
                project_dir,
                relative_paths,
                output_md,
                error_message=error_message,
                error_log1=error_log1,
                error_log2=error_log2,
                max_depth=max_depth
            )
            messagebox.showinfo("Success", f"Merged into {os.path.join(project_dir, output_md)}")
            logging.info("Merge completed successfully.")

        except Exception as e:
            # エラーが発生した場合はログに記録してユーザーに通知
            logging.error("Merge failed", exc_info=True)
            messagebox.showerror("Error", f"Merge failed: {e}")

    def do_reset():
        """リセットボタンが押された時の処理"""
        project_dir_var.set("")  # プロジェクトディレクトリをクリア
        file_list.clear()  # ファイルリストをクリア
        error_text.delete('1.0', tk.END)  # エラーテキストをクリア
        error_log1_text.delete('1.0', tk.END)  # エラーログ1をクリア
        error_log2_text.delete('1.0', tk.END)  # エラーログ2をクリア

    # マージボタンとリセットボタンの配置
    ttk.Button(frame_buttons, text="Merge", command=do_merge).pack(side='left', padx=5)
    ttk.Button(frame_buttons, text="Reset", command=do_reset).pack(side='left', padx=5)

    # ==========================================================
    # ステータス表示部分の作成
    # ==========================================================
    status_var = tk.StringVar()
    status_label = ttk.Label(root, textvariable=status_var, anchor='w')
    status_label.pack(fill='x', side='bottom', padx=5, pady=5)

    # メインループの開始（GUIの表示を開始）
    root.mainloop()


# プログラムのエントリーポイント
if __name__ == "__main__":
    main()
import os
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def merge_files(output_file):
    """
    指定されたディレクトリ内のすべてのファイルを結合し、一つのファイルに出力する。
    """
    total_size = 0
    file_count = 0
    
    with open(output_file, 'wb') as outfile:
        for filename in os.listdir('.'):
            if os.path.isfile(filename) and filename != output_file:
                try:
                    filepath = os.path.join('.', filename)
                    filesize = os.path.getsize(filepath)
                    logging.info(f"Merging file: {filename}, size: {filesize} bytes")
                    with open(filepath, 'rb') as infile:
                        outfile.write(infile.read())
                    total_size += filesize
                    file_count += 1
                except Exception as e:
                    logging.error(f"Error merging file: {filename}, {e}")
                    continue
        outfile.write(f"\n\nMerged {file_count} files, total size: {total_size} bytes".encode('utf-8'))
    logging.info(f"Successfully merged {file_count} files into {output_file}, total size: {total_size} bytes")

if __name__ == "__main__":
    output_filename = "merged_file.txt"
    merge_files(output_filename)
tkinterdnd2==0.3.0
pyinstaller==6.3.0
## 改善案の再評価

### グループ1

1.  **案1: シンプルなファイル結合 (改善)**
    -   **要件適合度**: 高。基本的なファイル結合の要件を満たす。
    -   **可読性**: 高。実装が容易で理解しやすい。
    -   **性能**: 中。ファイルサイズに依存するが、ログ出力は軽量。
    -   **保守性**: 高。シンプルで変更が容易。
    -   **コメント**: 基本的な機能に加え、ログ出力とエラーハンドリングが強化され、実用性が向上。

2.  **案3: ヘッダー/フッター付き結合 (改善)**
    -   **要件適合度**: 中。結合ファイルの識別が必要な場合に有効。
    -   **可読性**: 中。ヘッダー/フッターの追加処理が必要だが、カスタマイズ性が向上。
    -   **性能**: 高。ヘッダー/フッターの追加は比較的軽量。
    -   **保守性**: 中。カスタマイズ性が高い分、変更には注意が必要。
    -   **コメント**: メタデータを提供できるが、必須ではない。カスタマイズ性が向上。

### グループ2

3.  **案5: ファイル名によるソート結合 (改善)**
    -   **要件適合度**: 低。ファイル名順に結合する要件がある場合に有効。
    -   **可読性**: 高。ソート処理は比較的容易。
    -   **性能**: 高。ソート処理は高速。
    -   **保守性**: 高。ソート順の変更は容易。
    -   **コメント**: ファイル順序を制御できるが、一般的な要件ではない。ソートオプションが追加され、柔軟性が向上。

4.  **案7: 正規表現によるファイル選択結合 (改善)**
    -   **要件適合度**: 中。特定のファイルのみを結合する要件がある場合に有効。
    -   **可読性**: 中。正規表現処理が必要だが、テスト機能が追加され、理解しやすくなった。
    -   **性能**: 中。正規表現処理のオーバーヘッドがある。
    -   **保守性**: 中。正規表現の変更には注意が必要。
    -   **コメント**: 特定のファイルのみを結合できるが、複雑さが増す。複数の正規表現に対応し、柔軟性が向上。

### グループ3

5.  **案9: 圧縮結合 (改善)**
    -   **要件適合度**: 中。ファイルサイズを削減する要件がある場合に有効。
    -   **可読性**: 中。圧縮処理が必要だが、圧縮形式の選択が可能になった。
    -   **性能**: 中。圧縮処理のオーバーヘッドがある。
    -   **保守性**: 中。圧縮形式の変更には注意が必要。
    -   **コメント**: ファイルサイズを削減できるが、必須ではない。圧縮形式とレベルの選択が可能になり、柔軟性が向上。

6.  **案12: 並列結合 (改善)**
    -   **要件適合度**: 低。高速な結合が必要な場合に有効。
    -   **可読性**: 低。並列処理が必要で、実装が複雑。
    -   **性能**: 高。並列処理により高速化が期待できる。
    -   **保守性**: 低。並列処理の変更は複雑。
    -   **コメント**: 高速化が期待できるが、実装が複雑になる。スレッド数の設定が可能になり、柔軟性が向上。

### 最終選抜

上記の評価を踏まえ、最もバランスが取れており、汎用性が高いのは **案1: シンプルなファイル結合 (改善)** であると判断します。
## 初期案

### グループ1

1.  **案1: シンプルなファイル結合**
    -   すべてのファイルを順番に読み込み、一つのファイルに結合する。
    -   最も基本的なアプローチ。

2.  **案2: ファイルタイプによる結合**
    -   ファイルタイプ（例：テキストファイル、画像ファイル）ごとに結合方法を変える。
    -   異なるファイルタイプを適切に処理する。

3.  **案3: ヘッダー/フッター付き結合**
    -   結合されたファイルにヘッダーとフッターを追加する。
    -   結合されたファイルの識別やメタデータを提供。

4.  **案4: ファイルサイズによる分割結合**
    -   結合後のファイルサイズが一定のサイズを超えないように分割して結合する。
    -   大きなファイルを扱う際に便利。

### グループ2

5.  **案5: ファイル名によるソート結合**
    -   ファイル名をアルファベット順にソートして結合する。
    -   ファイル順序を制御する。

6.  **案6: タイムスタンプによるソート結合**
    -   ファイルのタイムスタンプ順にソートして結合する。
    -   ファイルの作成順序を維持する。

7.  **案7: 正規表現によるファイル選択結合**
    -   正規表現にマッチするファイルのみを結合する。
    -   特定のファイルのみを結合する柔軟性。

8.  **案8: ディレクトリ構造を保持した結合**
    -   元のディレクトリ構造を保持したままファイルを結合する。
    -   ファイル構造を維持する。

### グループ3

9.  **案9: 圧縮結合**
    -   結合されたファイルを圧縮する。
    -   ファイルサイズを削減する。

10. **案10: 暗号化結合**
    -   結合されたファイルを暗号化する。
    -   セキュリティを強化する。

11. **案11: 差分結合**
    -   変更されたファイルのみを結合する。
    -   効率的な結合。

12. **案12: 並列結合**
    -   複数のファイルを並列に結合する。
    -   高速な結合。
## 改善案

### グループ1

1.  **案1: シンプルなファイル結合 (改善)**
    -   **詳細**: すべてのファイルを順番に読み込み、一つのファイルに結合する。
    -   **改善点**:
        -   結合時にファイル名とファイルサイズをログとして出力する機能を追加。
        -   エラーハンドリングを強化し、ファイル読み込みエラー時に処理を中断せずにスキップする。
        -   結合後のファイルに、結合されたファイル数と合計サイズを追記する。

2.  **案3: ヘッダー/フッター付き結合 (改善)**
    -   **詳細**: 結合されたファイルにヘッダーとフッターを追加する。
    -   **改善点**:
        -   ヘッダーとフッターの内容をユーザーが設定できるようにする。
        -   ヘッダーとフッターにタイムスタンプやファイル名などの動的な情報を追加できるようにする。
        -   ヘッダーとフッターのフォーマットをカスタマイズできるようにする。

### グループ2

3.  **案5: ファイル名によるソート結合 (改善)**
    -   **詳細**: ファイル名をアルファベット順にソートして結合する。
    -   **改善点**:
        -   ソート順を昇順と降順で選択できるようにする。
        -   ファイル名の大文字小文字を区別するかどうかを選択できるようにする。
        -   ファイル名に数字が含まれる場合、自然順でソートできるようにする。

4.  **案7: 正規表現によるファイル選択結合 (改善)**
    -   **詳細**: 正規表現にマッチするファイルのみを結合する。
    -   **改善点**:
        -   複数の正規表現を同時に指定できるようにする。
        -   正規表現にマッチしないファイルをログとして出力する機能を追加。
        -   正規表現のテスト機能を追加し、指定した正規表現が意図通りに動作するか確認できるようにする。

### グループ3

5.  **案9: 圧縮結合 (改善)**
    -   **詳細**: 結合されたファイルを圧縮する。
    -   **改善点**:
        -   圧縮形式（例：zip, gzip）をユーザーが選択できるようにする。
        -   圧縮レベルをユーザーが設定できるようにする。
        -   圧縮後のファイルサイズをログとして出力する機能を追加。

6.  **案12: 並列結合 (改善)**
    -   **詳細**: 複数のファイルを並列に結合する。
    -   **改善点**:
        -   並列処理に使用するスレッド数をユーザーが設定できるようにする。
        -   並列処理の進捗状況をログとして出力する機能を追加。
        -   並列処理中にエラーが発生した場合、エラーログを出力し、処理を中断せずに続行する。
# ツール詳細設計書

## 概要

- **ツール名**：`FlaskDebugFileMerger`
- **目的**：Flaskアプリのプロジェクトディレクトリからテキスト系ファイルをユーザーが選択し、それらを単一のmdファイルとしてマージ。mdファイル冒頭に簡易ディレクトリツリーを付記し、各ファイル冒頭に元ファイルの相対パスを明示する。  
- **最優先事項**：  
  - Windows11 / Ubuntu対応  
  - `pip install -r requirements.txt`程度でセットアップ可能  
  - GUIは極力シンプル、ドラッグ＆ドロップ対応、マージボタン、リセットボタンのみ  
  - エラーハンドリングは簡易なGUIメッセージ表示とログ出力  
  - 直感的操作・素早いやり直し重視

## 対象OS / 環境

- **対応OS**：Windows11, Ubuntu  
- **Pythonバージョン**：3.8以上を想定
- **ライブラリ**：  
  - 標準ライブラリ（`tkinter`, `os`, `pathlib`, `shutil`, `logging`, `sys`など）  
  - 特別な依存を避けるため、GUIは`tkinter`標準利用  
- **インストール手順例**：  
  ```bash
  python -m venv venv
  source venv/bin/activate  (Windowsは venv\Scripts\activate)
  pip install -r requirements.txt
  python main.py
  ```

## ディレクトリ構成

```
project_root/
├─ main.py              # メインスクリプト（GUI起動、ロジック呼び出し）
├─ merger.py            # ファイルマージ等のロジック（任意で分離）
├─ config.ini           # 簡易設定ファイル（任意：出力mdファイル名デフォルト値など）
└─ requirements.txt
```

- `main.py`：GUIおよび全体フロー  
- `merger.py`：ファイル読み込み、相対パス計算、mdファイル生成等のロジック  
- `config.ini`：（任意）デフォルト出力ファイル名、ロギングレベルなどの基本設定  
- `requirements.txt`：本ツールの依存関係（最小限、`tkinter`は標準なので不要、特別な依存なしでOK）

## GUI詳細仕様（`main.py`）

- **メインウィンドウ**：  
  - タイトル：`"Flask Debug File Merger"`
  - サイズ：800x600ピクセル
  - 要素配置（縦方向にシンプルなレイアウト）：
    1. プロジェクトディレクトリ指定セクション
       - `Label`：「Project Directory」
       - `Entry`：ディレクトリパス入力用
       - `Button`：「Browse...」→ `askdirectory()`ダイアログ表示
    2. タブインターフェース（4つのタブ）
       - 「Files」タブ：
         - 「Add Files...」ボタン：複数ファイル選択ダイアログを表示
         - スクロール可能なファイルリスト
         - 各ファイル項目に削除ボタン（×）付き
         - ドラッグ＆ドロップ対応
         - ダブルクリックでファイル選択ダイアログを表示
         - 背景色を交互に変更（白/#f0f0f0）で視認性向上
       - 「Error Message」タブ：
         - 大型の`Text`ウィジェット
         - エラーメッセージを直接ペースト可能
       - 「Error Log 1」タブ：
         - 大型の`Text`ウィジェット
         - エラーログ1を直接ペースト可能
       - 「Error Log 2」タブ：
         - 大型の`Text`ウィジェット
         - エラーログ2を直接ペースト可能
    3. 操作ボタン行
       - `Button`：「Merge」→ 選択ファイルとエラーテキストをmdファイルにマージ
       - `Button`：「Reset」→ 全ての入力をクリア
    4. ステータス/ログ表示エリア
       - `Label`で簡易的メッセージ表示用

- **ファイルリスト機能**：
  - ファイル追加方法：
    1. 「Add Files...」ボタンで複数ファイル選択ダイアログを表示
    2. ドラッグ＆ドロップでファイルを追加
    3. リスト領域のダブルクリックでファイル選択ダイアログを表示
  - 各ファイル項目：
    - ファイルパスを表示するラベル
    - 削除ボタン（×）で個別に削除可能
    - 交互に背景色を変更して視認性を向上（白/#f0f0f0）
  - スクロール機能：
    - マウスホイールでスクロール可能
    - スクロールバー付き
  - 相対パス表示：
    - プロジェクトディレクトリからの相対パスを表示
    - 相対パス計算できない場合は絶対パスを表示

- **エラー関連タブ**：
  - エラーメッセージタブ：
    - デバッグ対象のエラーメッセージを直接ペースト可能
    - マージ時に`* 'Error Message'`として出力
  - エラーログ1タブ：
    - エラーログの1つ目を直接ペースト可能
    - マージ時に`* 'Error Log 1'`として出力
  - エラーログ2タブ：
    - エラーログの2つ目を直接ペースト可能
    - マージ時に`* 'Error Log 2'`として出力

- **マージ動作**：  
  - 「Merge」クリック時：
    1. プロジェクトディレクトリが入力済みか確認、なければエラーメッセージ表示してreturn
    2. ファイルリストとエラーテキスト類の両方が空ならエラーメッセージ表示してreturn
    3. `merger.py`内の`merge_files()`関数呼び出し  
       引数：`project_dir`, `list_of_relative_paths`, `output_md_path`, `error_message`, `error_log1`, `error_log2`
    4. 成功ならステータスに「Merge completed: [output_md_path]」表示

- **リセット動作**：  
  - 「Reset」クリック時：
    - `Entry`（Project Dir）を空白に
    - ファイルリストをクリア（全項目を削除）
    - エラーメッセージをクリア
    - エラーログ1をクリア
    - エラーログ2をクリア
    - ステータス表示クリア

- **エラーハンドリング**：  
  - エラー発生時はステータス表示エリアに「Error: {message}」と表示
  - 同時に`logging`モジュールで`error.log`にトレースバックや詳細ログ出力
  - ログが不要なら標準出力のみでも可

## マージロジック詳細（`merger.py`）

- **無視するディレクトリ**：
  ```python
  IGNORED_DIRS = {
      'venv',          # Python仮想環境
      '.git',          # Gitリポジトリ
      '.pytest_cache',  # Pytestのキャッシュ
      '__pycache__',   # Pythonのキャッシュ
      '.vscode',       # VSCodeの設定
      '.idea',         # PyCharmの設定
      'node_modules',  # Node.jsの依存関係
      '.env',          # 環境変数
      'build',         # ビルド成果物
      'dist',          # 配布用ファイル
      'coverage',      # カバレッジレポート
      '.coverage',     # カバレッジデータ
      '.mypy_cache',   # Mypyのキャッシュ
      '.tox',          # Toxの仮想環境
      'htmlcov',       # HTMLカバレッジレポート
  }
  ```
  - 上記のディレクトリはディレクトリツリーから完全に除外
  - 開発・ビルド関連の一時ファイルやキャッシュを非表示に

- 関数：`merge_files(project_dir: str, relative_paths: List[str], output_md: str, error_message: str = None, error_log1: str = None, error_log2: str = None) -> None`
  1. **入力ファイル検証**：  
     - `for p in relative_paths`  
       - `full_path = os.path.join(project_dir, p)`  
       - 存在確認・読み取り可能確認。NGなら例外発生→`main.py`側でキャッチして表示
  2. **プロジェクトディレクトリ階層リスト生成**：  
     - `generate_dir_structure(project_dir, max_depth=3)`関数で簡易ツリー作成  
     - 3階層程度の`tree`文字列を返す
     - 無視リストに含まれるディレクトリは除外  
  3. **マージ処理**：  
     - 新規`output_md`ファイル作成  
     - 冒頭に「# Project Structure\n\n```\n{tree}\n```\n\n」を書き込む
     - エラーメッセージがある場合：
       - `* 'Error Message'\n```\n{error_message}\n```\n\n`を書き込む
     - エラーログ1がある場合：
       - `* 'Error Log 1'\n```\n{error_log1}\n```\n\n`を書き込む
     - エラーログ2がある場合：
       - `* 'Error Log 2'\n```\n{error_log2}\n```\n\n`を書き込む
     - 各ファイルについて：
       - `fdata = open(full_path).read()`  
       - 拡張子に応じて`python`や`html`など適宜コードブロックの言語指定  
       - `md_output.write("* '{}'\n```{}\n{}\n```\n\n".format(p, lang, fdata))`  
         - `lang`は`'.py'`なら`python`、`'.html'`なら`html`など判別  
         - 該当しない場合は言語指定なし  
     - 書き込み完了後、ファイルを閉じる
  4. 正常終了

- 関数：`generate_dir_structure(project_dir: str, max_depth: int = 3) -> str`
  - `pathlib`でプロジェクトディレクトリを走査  
  - `max_depth`を超えた深さは表示しない
  - 無視リストに含まれるディレクトリはスキップ
  - アクセス権限エラーは安全に処理（スキップ）
  - テキスト例：  
    ```
    project_dir/
    ├─ src/
    │  ├─ main.py
    │  ├─ views.py
    ├─ requirements.txt
    └─ README.md
    ```
  - 上記のような簡易ASCIIツリーを返す

## ロギング

- `logging`モジュールで`error.log`を作成。  
- マージ成功時はINFOログ、失敗時はERRORログを出力。  
- 簡易例：  
  ```python
  import logging

  logging.basicConfig(
      filename='error.log',
      level=logging.INFO,
      format='%(asctime)s %(levelname)s %(message)s'
  )
  ```

- エラーが起きたら`logging.error("Exception occurred", exc_info=True)`でスタックトレース記録。

## テスト想定ケース

1. **正常系**：  
   - `project_dir`指定→`app.py`, `config.py`などドロップ→`Merge`→`merged_result.md`生成→中身確認
   - `project_dir`指定→エラーテキストをペースト→`Merge`→`merged_result.md`生成→中身確認
   - `project_dir`指定→ファイルドロップとエラーテキスト両方→`Merge`→`merged_result.md`生成→中身確認
   - `project_dir`指定→「Add Files...」でファイル選択→`Merge`→`merged_result.md`生成→中身確認
   - ファイルリストの項目を個別に削除→残りのファイルで`Merge`→`merged_result.md`生成→中身確認
   - エラーログ1とエラーログ2を入力→`Merge`→`merged_result.md`生成→中身確認
2. **エラー系**：  
   - ディレクトリ未指定で`Merge`→エラーメッセージ
   - 存在しないファイルドロップ→`Merge`→エラーメッセージ & ログ  
   - 権限不足ファイル→同上
   - ファイルもエラーテキストも無しで`Merge`→エラーメッセージ
3. **リセット**：  
   - `Reset`後、全ての入力（ファイルリスト、Entry、エラーテキスト、エラーログ）が空になり、ステータスもクリアされるか

## ユーザガイド（想定）

1. `python main.py`でツール起動  
2. 「Project Directory」にFlaskプロジェクトのルートを指定（BrowseボタンでGUI選択可能）  
3. 以下のいずれかまたは全てを実行：
   - 「Files」タブでファイルを追加：
     - 「Add Files...」ボタンで複数ファイル選択
     - エクスプローラーからドラッグ＆ドロップ
     - リスト領域をダブルクリックしてファイル選択
     - 不要なファイルは×ボタンで個別に削除可能
   - 「Error Message」タブでエラーメッセージをペースト
   - 「Error Log 1」タブでエラーログ1をペースト
   - 「Error Log 2」タブでエラーログ2をペースト
4. 「Merge」ボタンをクリック  
5. `merged_result.md`が`project_dir`直下に生成されるので、AIデバッガに投げる  
6. 結果が不満なら「Reset」押して、再度ファイル選び直し・マージ

## 追加拡張（任意）

- 設定ファイル`config.ini`でデフォルト出力ファイル名や最大ディレクトリ階層などを指定可能
- 出力後に自動でOSデフォルトエディタで`merged_result.md`を開く機能（`os.startfile`(Win), `xdg-open`(Linux)など）

## 実行可能ファイル（Windows向け）

### ビルド方法

1. 必要なパッケージのインストール：
   ```bash
   pip install -r requirements.txt
   ```

2. ビルドスクリプトの実行：
   ```bash
   python build.py
   ```

3. 生成物：
   - `dist/DebugFileMerger.exe`：単一の実行可能ファイル
   - 設定ファイル（config.ini）は実行可能ファイルに同梱

### 実行可能ファイルの特徴

- **単一ファイル**：
  - 依存関係を全て含んだ単一のexeファイル
  - Python環境不要で実行可能
  - 設定ファイルも内蔵

- **GUIモード**：
  - コンソールウィンドウを表示しない
  - クリーンなGUIのみの表示

- **使用方法**：
  1. `DebugFileMerger.exe`をダブルクリックで起動
  2. プロジェクトディレクトリを選択
  3. ファイルの追加とエラーメッセージの入力
  4. マージ実行

- **注意事項**：
  - Windows 11で動作確認済み
  - 実行時に一時的な設定ファイルが生成される場合あり
  - エラーログは実行ファイルと同じディレクトリに出力
## 初期案の評価

### グループ1

1.  **案1: シンプルなファイル結合**
    -   **要件適合度**: 高。基本的なファイル結合の要件を満たす。
    -   **可読性**: 高。実装が容易で理解しやすい。
    -   **性能**: 中。ファイルサイズに依存する。
    -   **コメント**: 最も基本的なアプローチで、シンプルだが柔軟性に欠ける。

2.  **案2: ファイルタイプによる結合**
    -   **要件適合度**: 中。ファイルタイプを考慮する必要がある場合に有効。
    -   **可読性**: 中。ファイルタイプを判別する処理が必要。
    -   **性能**: 中。ファイルタイプ判別処理のオーバーヘッドがある。
    -   **コメント**: 特定のファイルタイプを扱う場合に有用だが、複雑さが増す。

3.  **案3: ヘッダー/フッター付き結合**
    -   **要件適合度**: 中。結合ファイルの識別が必要な場合に有効。
    -   **可読性**: 中。ヘッダー/フッターの追加処理が必要。
    -   **性能**: 高。ヘッダー/フッターの追加は比較的軽量。
    -   **コメント**: 結合ファイルのメタデータを提供できるが、必須ではない。

4.  **案4: ファイルサイズによる分割結合**
    -   **要件適合度**: 中。大きなファイルを扱う場合に有効。
    -   **可読性**: 中。分割処理が必要。
    -   **性能**: 中。分割処理のオーバーヘッドがある。
    -   **コメント**: 大きなファイルを扱う場合に便利だが、複雑さが増す。

### グループ2

5.  **案5: ファイル名によるソート結合**
    -   **要件適合度**: 低。ファイル名順に結合する要件がある場合に有効。
    -   **可読性**: 高。ソート処理は比較的容易。
    -   **性能**: 高。ソート処理は高速。
    -   **コメント**: ファイル順序を制御できるが、一般的な要件ではない。

6.  **案6: タイムスタンプによるソート結合**
    -   **要件適合度**: 低。タイムスタンプ順に結合する要件がある場合に有効。
    -   **可読性**: 中。タイムスタンプ取得処理が必要。
    -   **性能**: 中。タイムスタンプ取得処理のオーバーヘッドがある。
    -   **コメント**: ファイルの作成順序を維持できるが、一般的な要件ではない。

7.  **案7: 正規表現によるファイル選択結合**
    -   **要件適合度**: 中。特定のファイルのみを結合する要件がある場合に有効。
    -   **可読性**: 中。正規表現処理が必要。
    -   **性能**: 中。正規表現処理のオーバーヘッドがある。
    -   **コメント**: 特定のファイルのみを結合できるが、複雑さが増す。

8.  **案8: ディレクトリ構造を保持した結合**
    -   **要件適合度**: 中。ディレクトリ構造を保持する要件がある場合に有効。
    -   **可読性**: 中。ディレクトリ構造を扱う処理が必要。
    -   **性能**: 中。ディレクトリ構造を扱うオーバーヘッドがある。
    -   **コメント**: ファイル構造を維持できるが、複雑さが増す。

### グループ3

9.  **案9: 圧縮結合**
    -   **要件適合度**: 中。ファイルサイズを削減する要件がある場合に有効。
    -   **可読性**: 中。圧縮処理が必要。
    -   **性能**: 中。圧縮処理のオーバーヘッドがある。
    -   **コメント**: ファイルサイズを削減できるが、必須ではない。

10. **案10: 暗号化結合**
    -   **要件適合度**: 低。セキュリティ要件がある場合に有効。
    -   **可読性**: 低。暗号化処理が必要。
    -   **性能**: 低。暗号化処理のオーバーヘッドが大きい。
    -   **コメント**: セキュリティを強化できるが、複雑さが増す。

11. **案11: 差分結合**
    -   **要件適合度**: 低。差分結合の要件がある場合に有効。
    -   **可読性**: 低。差分検出処理が必要。
    -   **性能**: 低。差分検出処理のオーバーヘッドが大きい。
    -   **コメント**: 効率的な結合ができるが、複雑さが増す。

12. **案12: 並列結合**
    -   **要件適合度**: 低。高速な結合が必要な場合に有効。
    -   **可読性**: 低。並列処理が必要。
    -   **性能**: 高。並列処理により高速化が期待できる。
    -   **コメント**: 高速化が期待できるが、実装が複雑になる。


Merged 12 files, total size: 50681 bytes